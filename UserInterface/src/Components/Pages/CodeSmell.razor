@page "/codesmell"
@using CodeSmellDetection.Models
@rendermode InteractiveServer
@inject ICodeSmellDetectionService CodeSmellDetectionService

<PageTitle>Code Smell Detection</PageTitle>

<br />
<button class="btn btn-primary" @onclick="DetectCodeSmells" disabled="@isLoading">Click me</button>
<br />
<InputFile OnChange="HandleFileSelected" multiple />
<br />

@if (isLoading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}
else if (codeSmells != null && codeSmells.Any())
{
    <p>File Name: @codeSmells.First().FileName, Current code smell count: @currentCount</p>
    <br />
    <h3>Detected Code Smells Types</h3>
    <p>This component demonstrates the code smell types detected.</p>
    <table class="table">
        <thead>
            <tr>
                <th>Type</th>
                <th>Description</th>
                <th>Line Number</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var codeSmell in codeSmells)
            {
                <tr>
                    <td>@codeSmell.Type</td>
                    <td>@codeSmell.Description</td>
                    <td>@codeSmell.LineNumber</td>
                    <td>
                        @if (codeSmell.Type == CodeSmellType.DuplicatedCode)
                        {
                            <button class="btn btn-secondary" @onclick="() => RefactorCodeSmell(codeSmell)">Refactor</button>
                            <button class="btn btn-secondary" @onclick="() => SaveRefactoredCodeToFile(codeSmell)">Save to File</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (codeSmells != null && codeSmells.Any())
{
    <br />
    <h3>File Content</h3>
    <p>This component demonstrates the file contents being analyzed for code smells. Line numbers have been added for readability.</p>
    <pre style="background-color: lightgray;">@GetCodeWithLineNumbers(codeSmells.First().Code)</pre>
    <style>
        pre {
            position: relative;
            padding-left: 3em;
        }

        pre::before {
            content: attr(data-line-numbers);
            position: absolute;
            left: 0;
            top: 0;
            padding-right: 1em;
            text-align: right;
            color: gray;
        }
    </style>
}

@code {
    private int currentCount = 0;
    private bool isLoading = false;
    private string? errorMessage;
    private List<CodeSmellDetection.Models.CodeSmell>? codeSmells;
    private IBrowserFile? selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await this.DetectCodeSmells();
    }

    private async Task DetectCodeSmells()
    {
        isLoading = true;
        errorMessage = null;
        codeSmells = null;

        if (selectedFile == null)
        {
            try
            {
                codeSmells = await CodeSmellDetectionService.DetectAsync();
                currentCount = codeSmells.Count;
            }
            catch (Exception ex)
            {
                errorMessage = $"Error detecting code smells: {ex.Message}";
            }
            finally
            {
                isLoading = false;
            }
            return;
        }

        try
        {
            using var stream = selectedFile.OpenReadStream();
            using var reader = new StreamReader(stream);
            var fileContent = await reader.ReadToEndAsync();
            codeSmells = await CodeSmellDetectionService.DetectAsync(selectedFile.Name, fileContent);
            currentCount = codeSmells.Count;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error detecting code smells: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
        return;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        await DetectCodeSmells();
    }

    private string GetCodeWithLineNumbers(string code)
    {
        var lines = code.Split(Environment.NewLine);
        var numberedLines = lines.Select((line, index) => $"{index + 1}: {line}");
        return string.Join(Environment.NewLine, numberedLines);
    }

    private async Task RefactorCodeSmell(CodeSmellDetection.Models.CodeSmell codeSmell)
    {
        var refactoredCode = await CodeSmellDetectionService.RefactorAsync(codeSmell);
    }

    private async Task SaveRefactoredCodeToFile(CodeSmellDetection.Models.CodeSmell codeSmell)
    {
        var refactoredCode = await CodeSmellDetectionService.RefactorAsync(codeSmell);
    }
}